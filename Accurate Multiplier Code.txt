#Accurate Multiplier Code
Verilog:
timescale 1ns / 1ps
module area_mult_10x10(
 input wire [9:0] A,
 input wire [9:0] B,
 output wire [19:0] P
);
 wire [19:0] pp[9:0];
 wire [19:0] sum1, sum2, sum3, sum4;
 wire carry1, carry2,carry3, carry4;
 assign pp[0] = (B[0]) ? {10'b0, A} : 20'b0;
 assign pp[1] = (B[1]) ? {9'b0, A, 1'b0} : 20'b0;
 assign pp[2] = (B[2]) ? {8'b0, A, 2'b00} : 20'b0;
 assign pp[3] = (B[3]) ? {7'b0, A, 3'b000} : 20'b0;
 assign pp[4] = (B[4]) ? {6'b0, A, 4'b0000} : 20'b0;
 assign pp[5] = (B[5]) ? {5'b0, A, 5'b00000} : 20'b0;
 assign pp[6] = (B[6]) ? {4'b0, A, 6'b000000} : 20'b0;
 assign pp[7] = (B[7]) ? {3'b0, A, 7'b0000000} : 20'b0;
 assign pp[8] = (B[8]) ? {2'b0, A, 8'b00000000} : 20'b0;
 assign pp[9] = (B[9]) ? {1'b0, A, 9'b000000000} : 20'b0;
 assign {carry1, sum1} = pp[0] + pp[1];
 assign {carry2, sum2} = sum1 + pp[2];
 assign {carry3, sum3} = sum2 + pp[3];
 assign {carry4, sum4} = sum3 + pp[4];
 assign P = sum4 + pp[5] + pp[6] + pp[7] + pp[8] + pp[9];
endmodule
Testbench:
`timescale 1ns / 1ps
module tb_area_mult_10x10;
 reg [9:0] A;
 reg [9:0] B;
 wire [19:0] P;
 area_mult_10x10 uut (
 .A(A),
.B(B),
 .P(P)
 );
 Initial
 begin
 $monitor("Time = %0t | A = %d, B = %d, P = %d", $time, A, B, P);
 End
 initial
 begin
 A = 10'd3; B = 10'd5;
 #10;
 A = 10'd12; B = 10'd15;
 #10;
 A = 10'd255; B = 10'd255;
 #10;
 A = 10'd682; B = 10'd91;
 #10;
 A = 10'd1023; B = 10'd1023;
 #10;
 $finish;
 end
endmodule